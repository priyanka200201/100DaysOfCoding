QUESTION: Balance a Binary Search Tree
//https://leetcode.com/problems/balance-a-binary-search-tree/description/

class Solution {
    public TreeNode balanceBST(TreeNode root) {
        if(root == null){
            return root;
        }
        List<TreeNode> list = new ArrayList<>();
        helper(root, list);
        
        return dfs(list, 0, list.size() - 1);
        
    }
    
    public TreeNode dfs(List<TreeNode> list, int low, int high){
        if(low <= high){
            int mid = (low + high)/2;
            TreeNode node = list.get(mid);
            node.left = dfs(list, low, mid-1);
            node.right = dfs(list, mid+1, high);
            return node;
        }
        return null;
    }
    
    public void helper(TreeNode node, List<TreeNode> list){
        if(node == null){
            return;
        }
        helper(node.left, list);
        list.add(node);
        helper(node.right, list);

    }
}